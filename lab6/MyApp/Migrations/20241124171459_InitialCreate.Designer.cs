// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Models;

#nullable disable

namespace MyApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241124171459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyApp.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AddressTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("AddressTypeCode1")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("AddressTypeCode1");

                    b.HasIndex("CompanyId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CustomerTypeCode")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeCode1")
                        .HasColumnType("int");

                    b.Property<int?>("EndUserId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerTypeCode1");

                    b.HasIndex("EndUserId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.CustomerMachine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("InstallationLocationAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MachineDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MachineOtherDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MachineType")
                        .HasColumnType("int");

                    b.Property<int>("MachineTypeNavigationMachineType")
                        .HasColumnType("int");

                    b.HasKey("MachineId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("MachineTypeNavigationMachineType");

                    b.ToTable("CustomerMachines", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.Distributor", b =>
                {
                    b.Property<int>("DistributorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DistributorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OtherDistributorDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ServiceVendorId")
                        .HasColumnType("int");

                    b.HasKey("DistributorId");

                    b.HasIndex("ServiceVendorId");

                    b.ToTable("Distributors", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.EndUser", b =>
                {
                    b.Property<int>("EndUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EndUserDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EndUserId");

                    b.ToTable("EndUsers", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.RefAddressType", b =>
                {
                    b.Property<int>("AddressTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressTypeDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AddressTypeCode");

                    b.ToTable("RefAddressTypes", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.RefCustomerType", b =>
                {
                    b.Property<int>("CustomerTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerTypeDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerTypeCode");

                    b.ToTable("RefCustomerTypes", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.RefMachineType", b =>
                {
                    b.Property<int>("MachineType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MachineTypeDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MachineType");

                    b.ToTable("RefMachineTypes", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.RefServiceType", b =>
                {
                    b.Property<int>("ServiceTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ServiceTypeDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ServiceTypeCode");

                    b.ToTable("RefServiceTypes", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.Service", b =>
                {
                    b.Property<int>("ServiceTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfService")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("OtherServiceDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ServiceTypeCode1")
                        .HasColumnType("int");

                    b.Property<int>("ServiceVendorId")
                        .HasColumnType("int");

                    b.HasKey("ServiceTypeCode");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ServiceTypeCode1");

                    b.HasIndex("ServiceVendorId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.ServiceVendor", b =>
                {
                    b.Property<int>("ServiceVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ServiceVendorDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ServiceVendorId");

                    b.ToTable("ServiceVendors", (string)null);
                });

            modelBuilder.Entity("MyApp.Models.Address", b =>
                {
                    b.HasOne("MyApp.Models.RefAddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Models.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MyApp.Models.Customer", b =>
                {
                    b.HasOne("MyApp.Models.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("MyApp.Models.RefCustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeCode1");

                    b.HasOne("MyApp.Models.EndUser", "EndUser")
                        .WithMany("Customers")
                        .HasForeignKey("EndUserId");

                    b.Navigation("Company");

                    b.Navigation("CustomerType");

                    b.Navigation("EndUser");
                });

            modelBuilder.Entity("MyApp.Models.CustomerMachine", b =>
                {
                    b.HasOne("MyApp.Models.Customer", "Customer")
                        .WithMany("CustomerMachines")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Models.Distributor", "Distributor")
                        .WithMany("CustomerMachines")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Models.RefMachineType", "MachineTypeNavigation")
                        .WithMany("CustomerMachines")
                        .HasForeignKey("MachineTypeNavigationMachineType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Distributor");

                    b.Navigation("MachineTypeNavigation");
                });

            modelBuilder.Entity("MyApp.Models.Distributor", b =>
                {
                    b.HasOne("MyApp.Models.ServiceVendor", "ServiceVendor")
                        .WithMany("Distributors")
                        .HasForeignKey("ServiceVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceVendor");
                });

            modelBuilder.Entity("MyApp.Models.Service", b =>
                {
                    b.HasOne("MyApp.Models.Distributor", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Models.RefServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Models.ServiceVendor", "ServiceVendor")
                        .WithMany("Services")
                        .HasForeignKey("ServiceVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distributor");

                    b.Navigation("ServiceType");

                    b.Navigation("ServiceVendor");
                });

            modelBuilder.Entity("MyApp.Models.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyApp.Models.Customer", b =>
                {
                    b.Navigation("CustomerMachines");
                });

            modelBuilder.Entity("MyApp.Models.Distributor", b =>
                {
                    b.Navigation("CustomerMachines");
                });

            modelBuilder.Entity("MyApp.Models.EndUser", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyApp.Models.RefAddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MyApp.Models.RefCustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyApp.Models.RefMachineType", b =>
                {
                    b.Navigation("CustomerMachines");
                });

            modelBuilder.Entity("MyApp.Models.RefServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("MyApp.Models.ServiceVendor", b =>
                {
                    b.Navigation("Distributors");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
